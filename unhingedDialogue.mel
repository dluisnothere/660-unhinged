global proc string stringArrayToString(string $array[], string $separator)
{
    string $result = "";
    for ($elem in $array) {
        if ($result == "") {
            $result = $elem;
        } else {
            $result = $result + $separator + $elem;
        }
    }
    return $result;
}

global proc int genFoldNode()
{    
    print("Hello");
    string $selected[] = `ls -sl`;
    print($selected);
    
    //if (size($selected)) {
        int $sizeSel = size($selected);
        print($sizeSel);
        
        instancer -n instancer1;
    
        string $nodeName = `createNode foldableNode -n foldableNode1`;

        connectAttr time1.outTime foldableNode1.inTime; 
        connectAttr foldableNode1.outPoint instancer1.inputPoints;

    //} else {
        //print("nothing selected");
    //}
    return true;
}

global int $planeID = 0;


global proc int genFoldPatch()
{
    // Access the global variable for the ID increment
    global int $planeID;
    
    // Create the PolyPlane with size 1x1 and only one subdivision
    string $polyPlane[] = `polyPlane -w 1 -h 1 -sx 1 -sy 1`;
    
    // Rename the PolyPlane with the incremented ID
    string $newName = "plane_" + $planeID;
    $polyPlaneCurr = `rename $polyPlane[0] $newName`;

    // Rotate the PolyPlane by (0, 0, -90)
    rotate -r 0 0 -90 $polyPlaneCurr;
    
    // Make the displayScalePivot and displayRotatePivot visible
    string $displayRotatePivot = $newName + ".displayRotatePivot";
    setAttr ($displayRotatePivot) 1;
    
    // Move the rotate pivot to the local position (0.5, 0, 0) in world space
    string $rotatePivotAttr = $newName + ".rotatePivot";
    setAttr ($rotatePivotAttr + "X") 0.5;
    setAttr ($rotatePivotAttr + "Y") 0;
    setAttr ($rotatePivotAttr + "Z") 0;

    // Increment the global ID
    $planeID++;
    setAttr ($newName + ".translateX") -0.5;
    makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1;
    
    return true;
}

global proc int genBasePatch()
{
    // Access the global variable for the ID increment
    global int $planeID;
    
    // Create the PolyPlane with size 1x1 and only one subdivision
    string $polyPlane[] = `polyPlane -w 1 -h 1 -sx 1 -sy 1`;
    
    // Rename the PolyPlane with the incremented ID
    string $newName = "plane_" + $planeID;
    $polyPlaneCurr = `rename $polyPlane[0] $newName`;

    // Make the displayScalePivot and displayRotatePivot visible
    string $displayRotatePivot = $newName + ".displayRotatePivot";
    setAttr ($displayRotatePivot) 1;

    // Increment the global ID
    $planeID++;
    
    return true;
}

global proc int densifyGrid()
{
    grid -d 10 -sp 1;
    return true;
}

global proc int onCheckboxChange(int $checked) 
{
    if ($checked) {
        snapMode -grid on -dsi 0.1;
    } else {
        snapMode -grid off;
    }
    return true;
}

global proc int genMenu()
{
    window -title "Unhinged Plugin: Di Lu and David Li CIS 660";
    	columnLayout -w 500;
    		button -label "Create Fold Patch" -command "genFoldPatch";
    		button -label "Create Base Patch" -command "genBasePatch";
    	    button -label "Create Foldable Node" -command "genFoldNode";
    	    button -label "Densify Grid" -command "densifyGrid";
            checkBox -label "Snap to Grid" -changeCommand "onCheckboxChange #1" snapCheckbox;
    	setParent ..;
    showWindow;
    return true;

}

{
    if(`menu -exists FoldableMenu`)
    {
        deleteUI FoldableMenu;
    }
}

{   
    global string $gMainWindow;
    string $lsystemMenu = `menu -p $gMainWindow -label "Unhinged" FoldableMenu`;
    menuItem -label "Open" -command "genMenu" genMenuItem;
    // menuItem -label "Create" -command "genFoldNode" MyMenuItem;
}
